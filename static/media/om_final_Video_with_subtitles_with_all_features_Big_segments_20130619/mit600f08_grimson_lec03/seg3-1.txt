



the following content is provided under a creative 

commons license 

your support will help mit opencourseware continue to 

offer highquality educational resources for free 

to make a donation or view additional materials from 

hundreds of mit courses visit mit opencourseware 

at ocwmitedu 

professor eric all right im going to start 

today by talking about so what have we been doing 

what have we actually done over the last few lectures 

and i want to suggest that what weve done is weve outlined a 

lot of the basic elements of programming 

a lot of the basic elements were going to need 

to write code 

and i want to just highlight it for you because were going 

to come back and look at it 

so im going to suggest that weve looked at three 

different kinds of things 

weve talked about data weve talked about operations 

and weve talked about commands or statements 

all right 

datas what we expect 

its our way of representing fundamentally the kinds of 

information we want to move around 

and here im going to suggest weve seen numbers weve seen 

strings and im going to add booleans here as well 

theyre a third kind of value that we saw when we started 

talking about conditions 

we saw associated with that primitive data we have ways of 

taking data in and creating new kinds of data out or new 

versions of data out so we have operations 

things like addition and multiplication which we saw 

not only apply to numbers but we can use them on things like 

strings and were going to come back to them again 

cant use them on booleans they have a different 

set of things 

they do things like and and or 

and of course theres a bunch of other ones in there im not 

going to put them all up but were building up a little 

collection if you like of those operations 

and then the main thing weve done is weve 

talked about commands 


so im going to suggest weve seen now four different things 

weve seen assignment how to bind a name to a value 

weve seen input and output 

print for output for example and raw input for input 

weve seen conditionals or said another way branches 

ways of changing the flow of control through that 

sequence of instructions were building up 

and the last thing we added were loop mechanisms 

and here we saw wow 

its the first example weve seen 


so whatve we done so far 

now interestingly this set of instructions was actually quite 

powerful and were going to come back to that later on in 

terms of what we can do with it but what weve really done 

is given that basis were now talking about how do we write 

common patterns of code how do we write things that solve 

particular kinds of problems 

so what i want you to do is to keep in mind those are the 


bases we ought to be able to do a lot with that bases but 

what were really interested in is not filling out a whole 

bunch of other things in here but how do we put them together 

into common templates 

and were going to do that today 

second thing weve been doing i want to highlight for you is 

weve along the way mostly just verbally rather than 

writing it down but weve been talking about good style 

good programming style 

all right 


things that we ought to do as you put these pieces together 

in order to give you really good code 

and you should be collecting those together 

give you some examples 

what have we talked about 

weve talked about things like using comments to highlight 

what youre doing in the code to make it easier to debug 

we talked about type discipline the notion that you 

should check the types of operands before you apply 

operators to them to make sure that theyre what the 

code is expecting 

we talked about descriptive use of good variable names 

as a way in essence of documenting your code 

the fourth one we talked about was this idea of testing all 

possible branches through a piece of code if its got 

conditionals in it to make sure that every possible input 

is going to give you an output that you actually want to see 

so you know you can start writing your own kind of miss 


manners book if you like i mean are what are good 

programming you know i wonder what youd call them 

john good programming hygiene 

good programming style 

good programming practices things that you want to 

do to write good code 

ok 

what were going to do today is were going to start now 

building up beyond just these pieces although theyre 

valuable to start creating two one common patterns of 

code that tackle certain classes of problems and 


secondly were going to talk about tools you can use to 

help understand those pieces of things 

ok 

so last time around we talked about or introduced if you 

like iterative programs 

and i want to generalize that for a second because 

were going to come back and use this a lot 

and i want to do a very highlevel description of what 

goes into an iterative program or how i would think 

about this all right 

and i know if john disagrees with me hell tell me but this 

is my way of thinking about it 

if i want to try and decide how to tackle a problem in an 

iterative matter here the steps im going to go through 


first thing im going to do is im going to choose a variable 

thats going to count 

what i meant what in the world do i mean by that 

im thinking about a problem im going to show you an 

example in a second first thing im going to do is say 

what is the thing thats going to change every time i run 

through the same set of code 

what is counting my way through this process 

now im putting count in double quotes not to make it a 

string but to say this is count generically 

it could be counting one by one through the integers it could 

also be taking a collection of data and going through 

them one by one 

it could be doing counting in some other mechanism 

but whats the variable i want to use 

second thing i do i need to initialize it 

and i need to initialize it outside of the loop 

that is where do i want to start 


and i need to make sure i have a command that sets that up 

the third thing im going to do is i need to set 

up the right end test 

how do i know when im done with the loop 

and obviously that ought to involve the variable in some 

way or its not going to make a lot of sense so this 

includes the variable since thats the thing 


thats changing 

all right 

the fourth thing im going to do is im going to then 

construct the block of code 

and i want to remind you that block of code is a set of 

instructions the same set of instructions that are going to 

be done each time through the loop 

all thats going to change is the value the variable or the 

value of some data structures 

and remind you that inside of here id better be 

changing the variable 
